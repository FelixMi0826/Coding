数据列表
*************************
数组
优点：
访问 地址是连续的，可以使用下标访问数组的某个元素
缺点：
插入或者删除 数组中的元素时，其后的所有元素都要被移动
复杂度
插入或者删除 复杂度O（N）

应用场景：快速访问 很少插入，删除
*************************


链表lindedList
概念：分散存储，节点node = 数据域 + 指针域，N个节点通过指针链接形成链表
优点：链表可以动态的进行数据分配，方便插入和删除数据项
缺点：地址是分散的，想要访问某个元素时，必须从头节点开始查找。
复杂度
插入或者删除 复杂度O（1）
应用场景：正常访问 经常插入，删除


为什么会出现数组和列表的处理会有差异呢？
因为计算机在读取连续的内存空间，处理效率会提高，为什么会这样呢？
CPU - CPU缓存 - 内存
CPU缓存的容量小速度快，数组可以利用，而列表不能应用，只能是内存和CPU的交互，效率会降低
*************************

哈希表 hashtable
概念：数组与下标的结合
    数组：指针
    下标：数字
冲突的解决办法时
链表式解决 与 开发地址(线性探测法，平方探测法，双哈希)
表满了，重新哈希

优点
查找性能快，O(1)
缺点
表越满，计算次数越多，性能越差
复杂度
查找：O(1)
*************************
 
树
概念：N个有限节点组成的有层次关系的非线性结构

有N个结点的完全二叉树的高度为 log2(N＋1)向上取整或者 log2N向下取整＋1

满二叉树的每层都填满

二叉树存储结构：
1）顺序存储 自上向下，自左向右，而且为空元素留出空间
1）链式存储

二叉树的遍历
前序遍历：先根，再左，再右
中序遍历：先左，再根，再右
后序遍历：先左，再右，再根
 
二叉树查找速度O（log2N）

*************************

栈
Last In First Out
Push
pop 
*************************
 
队列
First In First Out
push往队尾压入元素
pop删除队头元素
